<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:p="http://www.springframework.org/schema/p"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:cache="http://www.springframework.org/schema/cache"
	   xmlns:tx="http://www.springframework.org/schema/tx"
	   xmlns:util="http://www.springframework.org/schema/util"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
		http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-4.2.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.2.xsd">


	<bean id="requestMappingHandlerAdapter" class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter" xmlns="http://www.springframework.org/schema/beans">
		<property name="messageConverters">
			<util:list id="beanList">
				<bean class="org.springframework.http.converter.StringHttpMessageConverter">
					<property name="supportedMediaTypes">
						<util:list value-type="org.springframework.http.MediaType">
							<bean class="org.springframework.http.MediaType" factory-method="valueOf">
								<constructor-arg value="text/plain" />
							</bean>
						</util:list>
					</property>
				</bean>
				<ref bean="marshallingHttpMessageConverter"/>
				<ref bean="jsonMessageConverter"/>
			</util:list>
		</property>
	</bean>

	<bean id="jsonMessageConverter"  class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter" xmlns="http://www.springframework.org/schema/beans" >
		<property name="supportedMediaTypes" value="application/json"/>
		<property name="objectMapper">
			<ref bean="jacksonObjectMapper"/>
		</property>
	</bean>

	<bean id="jacksonObjectMapper" class="com.fasterxml.jackson.databind.ObjectMapper" xmlns="http://www.springframework.org/schema/beans"/>

	<bean id="marshallingHttpMessageConverter"  class="org.springframework.http.converter.xml.MarshallingHttpMessageConverter" xmlns="http://www.springframework.org/schema/beans" >
		<property name="marshaller" ref="jaxbMarshaller" />
		<property name="unmarshaller" ref="jaxbMarshaller" />
		<property name="supportedMediaTypes">
			<util:list>
				<bean class="org.springframework.http.MediaType">
					<constructor-arg value="text"/>
					<constructor-arg value="xml"/>
				</bean>
				<bean class="org.springframework.http.MediaType">
					<constructor-arg value="application"/>
					<constructor-arg value="xml"/>
				</bean>
			</util:list>
		</property>
	</bean>

	<bean id="jaxbMarshaller" class="org.springframework.oxm.jaxb.Jaxb2Marshaller" xmlns="http://www.springframework.org/schema/beans" >
		<property name="contextPaths">
			<list>
				<value>com.pb.tel.data</value>
				<value>com.pb.tel.data.telegram</value>
			</list>
		</property>
		<property name="marshallerProperties">
			<map>
				<entry key="jaxb.encoding" value="UTF-8"/>
			</map>
		</property>
	</bean>


	<!-- DataBase Configs -->

	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<property name="driverClass" value="${bankId.jdbcDriver}"/>
		<property name="jdbcUrl" value="${bankId.jdbcUrl}"/>
		<property name="initialPoolSize" value="0"/>
		<property name="minPoolSize" value="0"/>
		<property name="maxPoolSize" value="25"/>
		<property name="maxIdleTime" value="60"/>
		<property name="acquireIncrement" value="1"/>
		<property name="acquireRetryAttempts" value="5"/>
		<property name="acquireRetryDelay" value="1000"/>
		<property name="checkoutTimeout" value="0"/>
		<property name="idleConnectionTestPeriod" value="5"/>
		<property name="preferredTestQuery" value="select 1"/>
		<property name="properties">
			<props>
				<prop key="user">${bankId.user}</prop>
				<prop key="password">${bankId.password}</prop>
			</props>
		</property>
	</bean>


	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="emf"/>
	</bean>


	<tx:annotation-driven transaction-manager="transactionManager"/>

	<bean id="emf" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean" xmlns="http://www.springframework.org/schema/beans">
		<property name="dataSource" ref="dataSource" />
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter" />
		</property>
		<property name="packagesToScan" >
			<list>
				<value>com.pb.tel.data.privatmarket</value>
			</list>
		</property>
		<!-- <property name="jpaDialect">
           <<bean class="com.pb.uniwin.wu.h2h.utils.CustomHibernateJpaDialect" />
       </property>  -->
		<property name="jpaProperties">
			<props>
				<prop key="hibernate.temp.use_jdbc_metadata_defaults">false</prop>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
				<prop key="hibernate.max_fetch_depth">3</prop>
				<prop key="hibernate.jdbc.fetch_size">50</prop>
				<prop key="hibernate.jdbc.batch_size">20</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.SingletonEhCacheRegionFactory</prop>
				<!-- <prop key="hibernate.cache.provider_class">net/sf/ehcache/hibernate/SingletonEhCacheRegionFactory</prop> -->
				<!-- <prop key="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.EhCacheRegionFactory</prop> -->
				<prop key="hibernate.cache.use_second_level_cache">true</prop>
				<prop key="net.sf.ehcache.configurationResourceName">com/pb/tel/config/ehcache.xml</prop>
			</props>
		</property>
	</bean>



	<cache:annotation-driven cache-manager="cacheManager" />

	<bean id="ehcacheFactoryBean" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean" >
		<property name="configLocation"  value="classpath:com/pb/tel/config/ehcache.xml"/>
		<property name="shared" value="true" />
	</bean>

	<bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager" >
		<property name="cacheManager" ref="ehcacheFactoryBean"/>
	</bean>



	<!-- <bean id="transactionManager"  class="org.springframework.orm.hibernate5.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory" />
    </bean>

    <tx:annotation-driven transaction-manager="transactionManager"/>

    <bean id="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean" >
        <property name="dataSource" ref="dataSource"/>
        <property name="packagesToScan">
            <list>
		    	<value>com.pb.bi.data</value>
		    	<value>com.pb.bi.data.entry</value>
			</list>
        </property>
        <property name="hibernateProperties">
            <props>
				<prop key="hibernate.temp.use_jdbc_metadata_defaults">false</prop>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
				<prop key="hibernate.max_fetch_depth">3</prop>
				<prop key="hibernate.jdbc.fetch_size">200</prop>
				<prop key="hibernate.jdbc.batch_size">20</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.batch_fetch_style">DYNAMIC</prop>
			</props>
        </property>
    </bean>	 -->




	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<constructor-arg name="dataSource" ref="dataSource"/>
	</bean>

	<bean id="redisStorage" class="com.pb.tel.service.RedisStorage" xmlns="http://www.springframework.org/schema/beans">
		<constructor-arg name="jedisPool" ref="jedisPool"/>
	</bean>

	<bean id="jedisPool" class="redis.clients.jedis.JedisPool" xmlns="http://www.springframework.org/schema/beans">
		<constructor-arg name="poolConfig" ref="jedisPoolConfig"/>
		<constructor-arg name="host" value="${redisHost}"/>
		<constructor-arg name="port" value="${redisPort}"/>
		<constructor-arg name="timeout" value="${redisTimeout}"/>
		<constructor-arg name="password" value="${redisPassword}"/>
	</bean>

	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig" lazy-init="false" xmlns="http://www.springframework.org/schema/beans">
		<property name="maxTotal" value="${redisMaxTotal}"/>	<!--${redisMaxTotal}  -->
		<property name="maxIdle" value="${redisMaxIdle}"/>
		<property name="maxWaitMillis" value="${redisMaxWaitMillis}"/>
		<property name="testOnBorrow" value="${redisTestOnBorrow}"/>
	</bean>

	<bean id="const" class="com.pb.service.uniwin.ua.entity.Const" lazy-init="false">
		<constructor-arg name="bank" value="PB"/>
	</bean>

	<bean id="uniWinUtils" class="com.pb.service.uniwin.ua.UniWinUtils" depends-on="const"/>

	<bean id="ekbDao" class="com.pb.service.uniwin.ua.dao.EkbDaoImpl" >
		<constructor-arg name="cisToolsManagerUrl" value="${CisToolsManagerUrl}"/>
	</bean>

	<bean id="prominSession" class="com.pb.util.bpn.Sessions" xmlns="http://www.springframework.org/schema/beans">
		<constructor-arg name="url" value="${auth_url}"/>
		<constructor-arg name="login" value="${auth_login}"/>
		<constructor-arg name="authSys" value="${auth_system}"/>
		<constructor-arg name="password" value="${auth_pass}"/>
	</bean>
</beans>
